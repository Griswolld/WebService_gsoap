/* soapStub.h
   Generated by gSOAP 2.8.70 for myWeather.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://WebXml.com.cn/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20870
# error "GSOAP VERSION 20870 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class ns1__ArrayOfString;	/* myWeather.h:166 */
class _ns1__getSupportCity;	/* myWeather.h:169 */
class _ns1__getSupportCityResponse;	/* myWeather.h:172 */
class _ns1__getSupportProvince;	/* myWeather.h:175 */
class _ns1__getSupportProvinceResponse;	/* myWeather.h:178 */
class _ns1__getSupportDataSet;	/* myWeather.h:181 */
class _ns1__getSupportDataSetResponse_getSupportDataSetResult;	/* myWeather.h:357 */
class _ns1__getSupportDataSetResponse;	/* myWeather.h:184 */
class _ns1__getWeatherbyCityName;	/* myWeather.h:187 */
class _ns1__getWeatherbyCityNameResponse;	/* myWeather.h:190 */
class _ns1__getWeatherbyCityNamePro;	/* myWeather.h:193 */
class _ns1__getWeatherbyCityNameProResponse;	/* myWeather.h:196 */
class _ns1__DataSet;	/* myWeather.h:199 */
struct __ns1__getSupportCity;	/* myWeather.h:673 */
struct __ns1__getSupportProvince;	/* myWeather.h:746 */
struct __ns1__getSupportDataSet;	/* myWeather.h:821 */
struct __ns1__getWeatherbyCityName;	/* myWeather.h:904 */
struct __ns1__getWeatherbyCityNamePro;	/* myWeather.h:976 */
struct __ns1__getSupportCity_;	/* myWeather.h:1049 */
struct __ns1__getSupportProvince_;	/* myWeather.h:1122 */
struct __ns1__getSupportDataSet_;	/* myWeather.h:1197 */
struct __ns1__getWeatherbyCityName_;	/* myWeather.h:1280 */
struct __ns1__getWeatherbyCityNamePro_;	/* myWeather.h:1352 */

/* myWeather.h:166 */
#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (9)
/* complex XSD type 'ns1:ArrayOfString': */
class SOAP_CMAC ns1__ArrayOfString {
      public:
        /// Optional element 'ns1:string' of XSD type 'xsd:string'
        std::vector<std::wstring> string;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_ns1__ArrayOfString
        virtual long soap_type(void) const { return SOAP_TYPE_ns1__ArrayOfString; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__ArrayOfString, default initialized and not managed by a soap context
        virtual ns1__ArrayOfString *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns1__ArrayOfString); }
      public:
        /// Constructor with initializations
        ns1__ArrayOfString() : string(), soap() { }
        virtual ~ns1__ArrayOfString() { }
        /// Friend allocator used by soap_new_ns1__ArrayOfString(struct soap*, int)
        friend SOAP_FMAC1 ns1__ArrayOfString * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfString(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:169 */
#ifndef SOAP_TYPE__ns1__getSupportCity
#define SOAP_TYPE__ns1__getSupportCity (10)
/* complex XSD type 'ns1:getSupportCity': */
class SOAP_CMAC _ns1__getSupportCity {
      public:
        /// Optional element 'ns1:byProvinceName' of XSD type 'xsd:string'
        wchar_t *byProvinceName;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getSupportCity
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getSupportCity; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getSupportCity, default initialized and not managed by a soap context
        virtual _ns1__getSupportCity *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getSupportCity); }
      public:
        /// Constructor with initializations
        _ns1__getSupportCity() : byProvinceName(), soap() { }
        virtual ~_ns1__getSupportCity() { }
        /// Friend allocator used by soap_new__ns1__getSupportCity(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getSupportCity * SOAP_FMAC2 soap_instantiate__ns1__getSupportCity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:172 */
#ifndef SOAP_TYPE__ns1__getSupportCityResponse
#define SOAP_TYPE__ns1__getSupportCityResponse (11)
/* complex XSD type 'ns1:getSupportCityResponse': */
class SOAP_CMAC _ns1__getSupportCityResponse {
      public:
        /// Optional element 'ns1:getSupportCityResult' of XSD type 'ns1:ArrayOfString'
        ns1__ArrayOfString *getSupportCityResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getSupportCityResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getSupportCityResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getSupportCityResponse, default initialized and not managed by a soap context
        virtual _ns1__getSupportCityResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getSupportCityResponse); }
      public:
        /// Constructor with initializations
        _ns1__getSupportCityResponse() : getSupportCityResult(), soap() { }
        virtual ~_ns1__getSupportCityResponse() { }
        /// Friend allocator used by soap_new__ns1__getSupportCityResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getSupportCityResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportCityResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:175 */
#ifndef SOAP_TYPE__ns1__getSupportProvince
#define SOAP_TYPE__ns1__getSupportProvince (12)
/* complex XSD type 'ns1:getSupportProvince': */
class SOAP_CMAC _ns1__getSupportProvince {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getSupportProvince
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getSupportProvince; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getSupportProvince, default initialized and not managed by a soap context
        virtual _ns1__getSupportProvince *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getSupportProvince); }
      public:
        /// Constructor with initializations
        _ns1__getSupportProvince() : soap() { }
        virtual ~_ns1__getSupportProvince() { }
        /// Friend allocator used by soap_new__ns1__getSupportProvince(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getSupportProvince * SOAP_FMAC2 soap_instantiate__ns1__getSupportProvince(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:178 */
#ifndef SOAP_TYPE__ns1__getSupportProvinceResponse
#define SOAP_TYPE__ns1__getSupportProvinceResponse (13)
/* complex XSD type 'ns1:getSupportProvinceResponse': */
class SOAP_CMAC _ns1__getSupportProvinceResponse {
      public:
        /// Optional element 'ns1:getSupportProvinceResult' of XSD type 'ns1:ArrayOfString'
        ns1__ArrayOfString *getSupportProvinceResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getSupportProvinceResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getSupportProvinceResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getSupportProvinceResponse, default initialized and not managed by a soap context
        virtual _ns1__getSupportProvinceResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getSupportProvinceResponse); }
      public:
        /// Constructor with initializations
        _ns1__getSupportProvinceResponse() : getSupportProvinceResult(), soap() { }
        virtual ~_ns1__getSupportProvinceResponse() { }
        /// Friend allocator used by soap_new__ns1__getSupportProvinceResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getSupportProvinceResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportProvinceResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:181 */
#ifndef SOAP_TYPE__ns1__getSupportDataSet
#define SOAP_TYPE__ns1__getSupportDataSet (14)
/* complex XSD type 'ns1:getSupportDataSet': */
class SOAP_CMAC _ns1__getSupportDataSet {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getSupportDataSet
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getSupportDataSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getSupportDataSet, default initialized and not managed by a soap context
        virtual _ns1__getSupportDataSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getSupportDataSet); }
      public:
        /// Constructor with initializations
        _ns1__getSupportDataSet() : soap() { }
        virtual ~_ns1__getSupportDataSet() { }
        /// Friend allocator used by soap_new__ns1__getSupportDataSet(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getSupportDataSet * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:357 */
#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult
#define SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult (27)
/* complex XSD type 'ns1:getSupportDataSetResponse-getSupportDataSetResult': */
class SOAP_CMAC _ns1__getSupportDataSetResponse_getSupportDataSetResult {
      public:
        /// Required element 'xsd:schema' of XSD type 'xsd:anyType'
        char *xsd__schema;
        char *__any;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getSupportDataSetResponse_getSupportDataSetResult, default initialized and not managed by a soap context
        virtual _ns1__getSupportDataSetResponse_getSupportDataSetResult *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getSupportDataSetResponse_getSupportDataSetResult); }
      public:
        /// Constructor with initializations
        _ns1__getSupportDataSetResponse_getSupportDataSetResult() : xsd__schema(), __any() { }
        virtual ~_ns1__getSupportDataSetResponse_getSupportDataSetResult() { }
        /// Friend allocator used by soap_new__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getSupportDataSetResponse_getSupportDataSetResult * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSetResponse_getSupportDataSetResult(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:184 */
#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse
#define SOAP_TYPE__ns1__getSupportDataSetResponse (15)
/* complex XSD type 'ns1:getSupportDataSetResponse': */
class SOAP_CMAC _ns1__getSupportDataSetResponse {
      public:
        /// Optional element 'ns1:getSupportDataSetResult' of XSD type 'ns1:getSupportDataSetResponse-getSupportDataSetResult'
        _ns1__getSupportDataSetResponse_getSupportDataSetResult *getSupportDataSetResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getSupportDataSetResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getSupportDataSetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getSupportDataSetResponse, default initialized and not managed by a soap context
        virtual _ns1__getSupportDataSetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getSupportDataSetResponse); }
      public:
        /// Constructor with initializations
        _ns1__getSupportDataSetResponse() : getSupportDataSetResult(), soap() { }
        virtual ~_ns1__getSupportDataSetResponse() { }
        /// Friend allocator used by soap_new__ns1__getSupportDataSetResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getSupportDataSetResponse * SOAP_FMAC2 soap_instantiate__ns1__getSupportDataSetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:187 */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityName
#define SOAP_TYPE__ns1__getWeatherbyCityName (16)
/* complex XSD type 'ns1:getWeatherbyCityName': */
class SOAP_CMAC _ns1__getWeatherbyCityName {
      public:
        /// Optional element 'ns1:theCityName' of XSD type 'xsd:string'
        wchar_t *theCityName;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getWeatherbyCityName
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getWeatherbyCityName; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getWeatherbyCityName, default initialized and not managed by a soap context
        virtual _ns1__getWeatherbyCityName *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getWeatherbyCityName); }
      public:
        /// Constructor with initializations
        _ns1__getWeatherbyCityName() : theCityName(), soap() { }
        virtual ~_ns1__getWeatherbyCityName() { }
        /// Friend allocator used by soap_new__ns1__getWeatherbyCityName(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:190 */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameResponse
#define SOAP_TYPE__ns1__getWeatherbyCityNameResponse (17)
/* complex XSD type 'ns1:getWeatherbyCityNameResponse': */
class SOAP_CMAC _ns1__getWeatherbyCityNameResponse {
      public:
        /// Optional element 'ns1:getWeatherbyCityNameResult' of XSD type 'ns1:ArrayOfString'
        ns1__ArrayOfString *getWeatherbyCityNameResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getWeatherbyCityNameResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getWeatherbyCityNameResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getWeatherbyCityNameResponse, default initialized and not managed by a soap context
        virtual _ns1__getWeatherbyCityNameResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getWeatherbyCityNameResponse); }
      public:
        /// Constructor with initializations
        _ns1__getWeatherbyCityNameResponse() : getWeatherbyCityNameResult(), soap() { }
        virtual ~_ns1__getWeatherbyCityNameResponse() { }
        /// Friend allocator used by soap_new__ns1__getWeatherbyCityNameResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getWeatherbyCityNameResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNameResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:193 */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityNamePro
#define SOAP_TYPE__ns1__getWeatherbyCityNamePro (18)
/* complex XSD type 'ns1:getWeatherbyCityNamePro': */
class SOAP_CMAC _ns1__getWeatherbyCityNamePro {
      public:
        /// Optional element 'ns1:theCityName' of XSD type 'xsd:string'
        wchar_t *theCityName;
        /// Optional element 'ns1:theUserID' of XSD type 'xsd:string'
        wchar_t *theUserID;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getWeatherbyCityNamePro
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getWeatherbyCityNamePro; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getWeatherbyCityNamePro, default initialized and not managed by a soap context
        virtual _ns1__getWeatherbyCityNamePro *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getWeatherbyCityNamePro); }
      public:
        /// Constructor with initializations
        _ns1__getWeatherbyCityNamePro() : theCityName(), theUserID(), soap() { }
        virtual ~_ns1__getWeatherbyCityNamePro() { }
        /// Friend allocator used by soap_new__ns1__getWeatherbyCityNamePro(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNamePro(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:196 */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameProResponse
#define SOAP_TYPE__ns1__getWeatherbyCityNameProResponse (19)
/* complex XSD type 'ns1:getWeatherbyCityNameProResponse': */
class SOAP_CMAC _ns1__getWeatherbyCityNameProResponse {
      public:
        /// Optional element 'ns1:getWeatherbyCityNameProResult' of XSD type 'ns1:ArrayOfString'
        ns1__ArrayOfString *getWeatherbyCityNameProResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__getWeatherbyCityNameProResponse
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__getWeatherbyCityNameProResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__getWeatherbyCityNameProResponse, default initialized and not managed by a soap context
        virtual _ns1__getWeatherbyCityNameProResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__getWeatherbyCityNameProResponse); }
      public:
        /// Constructor with initializations
        _ns1__getWeatherbyCityNameProResponse() : getWeatherbyCityNameProResult(), soap() { }
        virtual ~_ns1__getWeatherbyCityNameProResponse() { }
        /// Friend allocator used by soap_new__ns1__getWeatherbyCityNameProResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__getWeatherbyCityNameProResponse * SOAP_FMAC2 soap_instantiate__ns1__getWeatherbyCityNameProResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:199 */
#ifndef SOAP_TYPE__ns1__DataSet
#define SOAP_TYPE__ns1__DataSet (20)
/* complex XSD type 'ns1:DataSet': */
class SOAP_CMAC _ns1__DataSet {
      public:
        /// Required element 'xsd:schema' of XSD type 'xsd:anyType'
        char *xsd__schema;
        char *__any;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__ns1__DataSet
        virtual long soap_type(void) const { return SOAP_TYPE__ns1__DataSet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__DataSet, default initialized and not managed by a soap context
        virtual _ns1__DataSet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__DataSet); }
      public:
        /// Constructor with initializations
        _ns1__DataSet() : xsd__schema(), __any(), soap() { }
        virtual ~_ns1__DataSet() { }
        /// Friend allocator used by soap_new__ns1__DataSet(struct soap*, int)
        friend SOAP_FMAC1 _ns1__DataSet * SOAP_FMAC2 soap_instantiate__ns1__DataSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:673 */
#ifndef SOAP_TYPE___ns1__getSupportCity
#define SOAP_TYPE___ns1__getSupportCity (32)
/* Wrapper: */
struct SOAP_CMAC __ns1__getSupportCity {
      public:
        /** Optional element 'ns1:getSupportCity' of XSD type 'ns1:getSupportCity' */
        _ns1__getSupportCity *ns1__getSupportCity;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getSupportCity */
        long soap_type() const { return SOAP_TYPE___ns1__getSupportCity; }
        /** Constructor with member initializations */
        __ns1__getSupportCity() : ns1__getSupportCity() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getSupportCity * SOAP_FMAC2 soap_instantiate___ns1__getSupportCity(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:746 */
#ifndef SOAP_TYPE___ns1__getSupportProvince
#define SOAP_TYPE___ns1__getSupportProvince (36)
/* Wrapper: */
struct SOAP_CMAC __ns1__getSupportProvince {
      public:
        /** Optional element 'ns1:getSupportProvince' of XSD type 'ns1:getSupportProvince' */
        _ns1__getSupportProvince *ns1__getSupportProvince;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getSupportProvince */
        long soap_type() const { return SOAP_TYPE___ns1__getSupportProvince; }
        /** Constructor with member initializations */
        __ns1__getSupportProvince() : ns1__getSupportProvince() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getSupportProvince * SOAP_FMAC2 soap_instantiate___ns1__getSupportProvince(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:821 */
#ifndef SOAP_TYPE___ns1__getSupportDataSet
#define SOAP_TYPE___ns1__getSupportDataSet (40)
/* Wrapper: */
struct SOAP_CMAC __ns1__getSupportDataSet {
      public:
        /** Optional element 'ns1:getSupportDataSet' of XSD type 'ns1:getSupportDataSet' */
        _ns1__getSupportDataSet *ns1__getSupportDataSet;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getSupportDataSet */
        long soap_type() const { return SOAP_TYPE___ns1__getSupportDataSet; }
        /** Constructor with member initializations */
        __ns1__getSupportDataSet() : ns1__getSupportDataSet() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getSupportDataSet * SOAP_FMAC2 soap_instantiate___ns1__getSupportDataSet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:904 */
#ifndef SOAP_TYPE___ns1__getWeatherbyCityName
#define SOAP_TYPE___ns1__getWeatherbyCityName (44)
/* Wrapper: */
struct SOAP_CMAC __ns1__getWeatherbyCityName {
      public:
        /** Optional element 'ns1:getWeatherbyCityName' of XSD type 'ns1:getWeatherbyCityName' */
        _ns1__getWeatherbyCityName *ns1__getWeatherbyCityName;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getWeatherbyCityName */
        long soap_type() const { return SOAP_TYPE___ns1__getWeatherbyCityName; }
        /** Constructor with member initializations */
        __ns1__getWeatherbyCityName() : ns1__getWeatherbyCityName() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getWeatherbyCityName * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityName(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:976 */
#ifndef SOAP_TYPE___ns1__getWeatherbyCityNamePro
#define SOAP_TYPE___ns1__getWeatherbyCityNamePro (48)
/* Wrapper: */
struct SOAP_CMAC __ns1__getWeatherbyCityNamePro {
      public:
        /** Optional element 'ns1:getWeatherbyCityNamePro' of XSD type 'ns1:getWeatherbyCityNamePro' */
        _ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getWeatherbyCityNamePro */
        long soap_type() const { return SOAP_TYPE___ns1__getWeatherbyCityNamePro; }
        /** Constructor with member initializations */
        __ns1__getWeatherbyCityNamePro() : ns1__getWeatherbyCityNamePro() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getWeatherbyCityNamePro * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityNamePro(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:1049 */
#ifndef SOAP_TYPE___ns1__getSupportCity_
#define SOAP_TYPE___ns1__getSupportCity_ (50)
/* Wrapper: */
struct SOAP_CMAC __ns1__getSupportCity_ {
      public:
        /** Optional element 'ns1:getSupportCity' of XSD type 'ns1:getSupportCity' */
        _ns1__getSupportCity *ns1__getSupportCity;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getSupportCity_ */
        long soap_type() const { return SOAP_TYPE___ns1__getSupportCity_; }
        /** Constructor with member initializations */
        __ns1__getSupportCity_() : ns1__getSupportCity() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getSupportCity_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportCity_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:1122 */
#ifndef SOAP_TYPE___ns1__getSupportProvince_
#define SOAP_TYPE___ns1__getSupportProvince_ (52)
/* Wrapper: */
struct SOAP_CMAC __ns1__getSupportProvince_ {
      public:
        /** Optional element 'ns1:getSupportProvince' of XSD type 'ns1:getSupportProvince' */
        _ns1__getSupportProvince *ns1__getSupportProvince;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getSupportProvince_ */
        long soap_type() const { return SOAP_TYPE___ns1__getSupportProvince_; }
        /** Constructor with member initializations */
        __ns1__getSupportProvince_() : ns1__getSupportProvince() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getSupportProvince_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportProvince_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:1197 */
#ifndef SOAP_TYPE___ns1__getSupportDataSet_
#define SOAP_TYPE___ns1__getSupportDataSet_ (54)
/* Wrapper: */
struct SOAP_CMAC __ns1__getSupportDataSet_ {
      public:
        /** Optional element 'ns1:getSupportDataSet' of XSD type 'ns1:getSupportDataSet' */
        _ns1__getSupportDataSet *ns1__getSupportDataSet;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getSupportDataSet_ */
        long soap_type() const { return SOAP_TYPE___ns1__getSupportDataSet_; }
        /** Constructor with member initializations */
        __ns1__getSupportDataSet_() : ns1__getSupportDataSet() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getSupportDataSet_ * SOAP_FMAC2 soap_instantiate___ns1__getSupportDataSet_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:1280 */
#ifndef SOAP_TYPE___ns1__getWeatherbyCityName_
#define SOAP_TYPE___ns1__getWeatherbyCityName_ (56)
/* Wrapper: */
struct SOAP_CMAC __ns1__getWeatherbyCityName_ {
      public:
        /** Optional element 'ns1:getWeatherbyCityName' of XSD type 'ns1:getWeatherbyCityName' */
        _ns1__getWeatherbyCityName *ns1__getWeatherbyCityName;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getWeatherbyCityName_ */
        long soap_type() const { return SOAP_TYPE___ns1__getWeatherbyCityName_; }
        /** Constructor with member initializations */
        __ns1__getWeatherbyCityName_() : ns1__getWeatherbyCityName() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getWeatherbyCityName_ * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityName_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:1352 */
#ifndef SOAP_TYPE___ns1__getWeatherbyCityNamePro_
#define SOAP_TYPE___ns1__getWeatherbyCityNamePro_ (58)
/* Wrapper: */
struct SOAP_CMAC __ns1__getWeatherbyCityNamePro_ {
      public:
        /** Optional element 'ns1:getWeatherbyCityNamePro' of XSD type 'ns1:getWeatherbyCityNamePro' */
        _ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro;
      public:
        /** Return unique type id SOAP_TYPE___ns1__getWeatherbyCityNamePro_ */
        long soap_type() const { return SOAP_TYPE___ns1__getWeatherbyCityNamePro_; }
        /** Constructor with member initializations */
        __ns1__getWeatherbyCityNamePro_() : ns1__getWeatherbyCityNamePro() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns1__getWeatherbyCityNamePro_ * SOAP_FMAC2 soap_instantiate___ns1__getWeatherbyCityNamePro_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* myWeather.h:1580 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (59)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* myWeather.h:1580 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (60)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* myWeather.h:1580 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (62)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* myWeather.h:1580 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (65)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* myWeather.h:1580 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (66)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/* myWeather.h:155 */
#ifndef SOAP_TYPE__xsd__schema
#define SOAP_TYPE__xsd__schema (8)
typedef _XML _xsd__schema;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _ns1__getSupportDataSetResponse_getSupportDataSetResult has binding name '_ns1__getSupportDataSetResponse_getSupportDataSetResult' for type '' */
#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult
#define SOAP_TYPE__ns1__getSupportDataSetResponse_getSupportDataSetResult (27)
#endif

/* std::wstring has binding name 'std__wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (21)
#endif

/* _ns1__DataSet has binding name '_ns1__DataSet' for type '' */
#ifndef SOAP_TYPE__ns1__DataSet
#define SOAP_TYPE__ns1__DataSet (20)
#endif

/* _ns1__getWeatherbyCityNameProResponse has binding name '_ns1__getWeatherbyCityNameProResponse' for type '' */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameProResponse
#define SOAP_TYPE__ns1__getWeatherbyCityNameProResponse (19)
#endif

/* _ns1__getWeatherbyCityNamePro has binding name '_ns1__getWeatherbyCityNamePro' for type '' */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityNamePro
#define SOAP_TYPE__ns1__getWeatherbyCityNamePro (18)
#endif

/* _ns1__getWeatherbyCityNameResponse has binding name '_ns1__getWeatherbyCityNameResponse' for type '' */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityNameResponse
#define SOAP_TYPE__ns1__getWeatherbyCityNameResponse (17)
#endif

/* _ns1__getWeatherbyCityName has binding name '_ns1__getWeatherbyCityName' for type '' */
#ifndef SOAP_TYPE__ns1__getWeatherbyCityName
#define SOAP_TYPE__ns1__getWeatherbyCityName (16)
#endif

/* _ns1__getSupportDataSetResponse has binding name '_ns1__getSupportDataSetResponse' for type '' */
#ifndef SOAP_TYPE__ns1__getSupportDataSetResponse
#define SOAP_TYPE__ns1__getSupportDataSetResponse (15)
#endif

/* _ns1__getSupportDataSet has binding name '_ns1__getSupportDataSet' for type '' */
#ifndef SOAP_TYPE__ns1__getSupportDataSet
#define SOAP_TYPE__ns1__getSupportDataSet (14)
#endif

/* _ns1__getSupportProvinceResponse has binding name '_ns1__getSupportProvinceResponse' for type '' */
#ifndef SOAP_TYPE__ns1__getSupportProvinceResponse
#define SOAP_TYPE__ns1__getSupportProvinceResponse (13)
#endif

/* _ns1__getSupportProvince has binding name '_ns1__getSupportProvince' for type '' */
#ifndef SOAP_TYPE__ns1__getSupportProvince
#define SOAP_TYPE__ns1__getSupportProvince (12)
#endif

/* _ns1__getSupportCityResponse has binding name '_ns1__getSupportCityResponse' for type '' */
#ifndef SOAP_TYPE__ns1__getSupportCityResponse
#define SOAP_TYPE__ns1__getSupportCityResponse (11)
#endif

/* _ns1__getSupportCity has binding name '_ns1__getSupportCity' for type '' */
#ifndef SOAP_TYPE__ns1__getSupportCity
#define SOAP_TYPE__ns1__getSupportCity (10)
#endif

/* ns1__ArrayOfString has binding name 'ns1__ArrayOfString' for type 'ns1:ArrayOfString' */
#ifndef SOAP_TYPE_ns1__ArrayOfString
#define SOAP_TYPE_ns1__ArrayOfString (9)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (66)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (65)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (62)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (60)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (59)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (68)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (67)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (61)
#endif

/* _ns1__getWeatherbyCityNamePro * has binding name 'PointerTo_ns1__getWeatherbyCityNamePro' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro
#define SOAP_TYPE_PointerTo_ns1__getWeatherbyCityNamePro (45)
#endif

/* _ns1__getWeatherbyCityName * has binding name 'PointerTo_ns1__getWeatherbyCityName' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName
#define SOAP_TYPE_PointerTo_ns1__getWeatherbyCityName (41)
#endif

/* _ns1__getSupportDataSet * has binding name 'PointerTo_ns1__getSupportDataSet' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getSupportDataSet
#define SOAP_TYPE_PointerTo_ns1__getSupportDataSet (37)
#endif

/* _ns1__getSupportProvince * has binding name 'PointerTo_ns1__getSupportProvince' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getSupportProvince
#define SOAP_TYPE_PointerTo_ns1__getSupportProvince (33)
#endif

/* _ns1__getSupportCity * has binding name 'PointerTo_ns1__getSupportCity' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getSupportCity
#define SOAP_TYPE_PointerTo_ns1__getSupportCity (29)
#endif

/* _ns1__getSupportDataSetResponse_getSupportDataSetResult * has binding name 'PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult
#define SOAP_TYPE_PointerTo_ns1__getSupportDataSetResponse_getSupportDataSetResult (28)
#endif

/* ns1__ArrayOfString * has binding name 'PointerTons1__ArrayOfString' for type 'ns1:ArrayOfString' */
#ifndef SOAP_TYPE_PointerTons1__ArrayOfString
#define SOAP_TYPE_PointerTons1__ArrayOfString (26)
#endif

/* wchar_t * has binding name 'wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_wstring
#define SOAP_TYPE_wstring (25)
#endif

/* _xsd__schema has binding name '_xsd__schema' for type '' */
#ifndef SOAP_TYPE__xsd__schema
#define SOAP_TYPE__xsd__schema (8)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/* std::vector<std::wstring>  has binding name 'std__vectorTemplateOfstd__wstring' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__vectorTemplateOfstd__wstring
#define SOAP_TYPE_std__vectorTemplateOfstd__wstring (22)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSupportCity(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getSupportCity *ns1__getSupportCity, _ns1__getSupportCityResponse &ns1__getSupportCityResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSupportProvince(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getSupportProvince *ns1__getSupportProvince, _ns1__getSupportProvinceResponse &ns1__getSupportProvinceResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSupportDataSet(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getSupportDataSet *ns1__getSupportDataSet, _ns1__getSupportDataSetResponse &ns1__getSupportDataSetResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWeatherbyCityName(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getWeatherbyCityName *ns1__getWeatherbyCityName, _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWeatherbyCityNamePro(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro, _ns1__getWeatherbyCityNameProResponse &ns1__getWeatherbyCityNameProResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSupportCity_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getSupportCity *ns1__getSupportCity, _ns1__getSupportCityResponse &ns1__getSupportCityResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSupportProvince_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getSupportProvince *ns1__getSupportProvince, _ns1__getSupportProvinceResponse &ns1__getSupportProvinceResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getSupportDataSet_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getSupportDataSet *ns1__getSupportDataSet, _ns1__getSupportDataSetResponse &ns1__getSupportDataSetResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWeatherbyCityName_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getWeatherbyCityName *ns1__getWeatherbyCityName, _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__getWeatherbyCityNamePro_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro, _ns1__getWeatherbyCityNameProResponse &ns1__getWeatherbyCityNameProResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation '__ns1__getSupportCity' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getSupportCity(struct soap*, _ns1__getSupportCity *ns1__getSupportCity, _ns1__getSupportCityResponse &ns1__getSupportCityResponse);
    /** Web service operation '__ns1__getSupportProvince' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getSupportProvince(struct soap*, _ns1__getSupportProvince *ns1__getSupportProvince, _ns1__getSupportProvinceResponse &ns1__getSupportProvinceResponse);
    /** Web service operation '__ns1__getSupportDataSet' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getSupportDataSet(struct soap*, _ns1__getSupportDataSet *ns1__getSupportDataSet, _ns1__getSupportDataSetResponse &ns1__getSupportDataSetResponse);
    /** Web service operation '__ns1__getWeatherbyCityName' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getWeatherbyCityName(struct soap*, _ns1__getWeatherbyCityName *ns1__getWeatherbyCityName, _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse);
    /** Web service operation '__ns1__getWeatherbyCityNamePro' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getWeatherbyCityNamePro(struct soap*, _ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro, _ns1__getWeatherbyCityNameProResponse &ns1__getWeatherbyCityNameProResponse);
    /** Web service operation '__ns1__getSupportCity_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getSupportCity_(struct soap*, _ns1__getSupportCity *ns1__getSupportCity, _ns1__getSupportCityResponse &ns1__getSupportCityResponse);
    /** Web service operation '__ns1__getSupportProvince_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getSupportProvince_(struct soap*, _ns1__getSupportProvince *ns1__getSupportProvince, _ns1__getSupportProvinceResponse &ns1__getSupportProvinceResponse);
    /** Web service operation '__ns1__getSupportDataSet_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getSupportDataSet_(struct soap*, _ns1__getSupportDataSet *ns1__getSupportDataSet, _ns1__getSupportDataSetResponse &ns1__getSupportDataSetResponse);
    /** Web service operation '__ns1__getWeatherbyCityName_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getWeatherbyCityName_(struct soap*, _ns1__getWeatherbyCityName *ns1__getWeatherbyCityName, _ns1__getWeatherbyCityNameResponse &ns1__getWeatherbyCityNameResponse);
    /** Web service operation '__ns1__getWeatherbyCityNamePro_' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __ns1__getWeatherbyCityNamePro_(struct soap*, _ns1__getWeatherbyCityNamePro *ns1__getWeatherbyCityNamePro, _ns1__getWeatherbyCityNameProResponse &ns1__getWeatherbyCityNameProResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getSupportCity(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getSupportProvince(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getSupportDataSet(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getWeatherbyCityName(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getWeatherbyCityNamePro(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getSupportCity_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getSupportProvince_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getSupportDataSet_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getWeatherbyCityName_(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__getWeatherbyCityNamePro_(struct soap*);

#endif

/* End of soapStub.h */
